// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String  @unique
  password String?
  avatar   String?

  //profile
  phone       String?
  timezone    String?
  dateOfBirth String?
  gender      String?

  //parmitions
  notificationAccess Boolean @default(true)
  emailAccess        Boolean @default(true)
  appUpdateAccess    Boolean @default(true)
  messageAccess      Boolean @default(true)
  soundAccess        Boolean @default(true)

  //sequrity
  sessionTimeout            Int?
  passwordExpiry            Int?
  two_factor_authentication Int     @default(0)
  secret                    String?

  type userStatus @default(user)

  isSubscriber Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  favoriteRecipe FavoriteRecipe[]
  transaction    Transaction[]

  @@index([name])
  @@index([email])
  @@map("users")
}

enum userStatus {
  user
  admin
}

model Recipe {
  id              String    @id @default(cuid())
  image           String? // optional image URL/path
  name            String
  minCookingTime  Int // minimum cooking time in minutes
  maxCookingTime  Int // maximum cooking time in minutes
  calories        Int
  targetLifestyle Lifestyle

  categories String
  budget     budgetType
  recipeType String

  dietaryPreference String
  description       String

  // Relations
  favoriteRecipes FavoriteRecipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recipe")
}

model FavoriteRecipe {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("favorite_recipe")
}

enum Lifestyle {
  student
  senior
}

enum budgetType {
  High
  Medium
  Low
}

model Setting {
  id String @id @default(cuid())

  privacyPolicy  String?
  termsCondition String?
  aboutUs        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("setting")
}

model SubscriptionPackage {
  id              String  @id @default(cuid())
  name            String
  description     String
  amount          Float
  currency        String  @default("usd")
  duration        String? // Made optional with ?
  interval        String // "day", "week", "month", "year"
  interval_count  Int     @default(1)
  isRecurring     Boolean @default(true)
  stripeProductId String?
  stripePriceId   String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transaction Transaction[]

  @@map("subscriptionPackage")
}

model Transaction {
  id String @id @default(cuid())

  // Unique ID from payment gateway
  transactionId String @unique

  amount        Float
  currency      String  @default("usd")
  paymentMethod String?

  //424242424****
  accountNumber String?

  // Subscription dates
  startDate   DateTime
  endDate     DateTime
  autoRenewal Boolean  @default(true)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subscriptionPackageId String
  subscriptionPackage   SubscriptionPackage @relation(fields: [subscriptionPackageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transaction")
}
